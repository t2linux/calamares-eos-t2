### Documentation on why we are using this modified versions will follow here:
Python modules (it is implemented in C++ and injected into the Python
environment by Calamares).


1. **copy_kernel:** *unused* now a shellprocess: [shellprocess_ck.conf](https://github.com/endeavouros-team/EndeavourOS-calamares/blob/main/calamares/modules/shellprocess_ck.conf)

2. **eos_script:** This module is unique to EndeavourOS, and used to integrate the scripts we need to create EndeavourOS and mainly Archlinux specific configurations.

3. **fstab** and ***mount:** We use the fstab and mount modules from Calamares 3.3. There are a couple of big advantages:
   * Mount options are now set prior to installation so things like compression are applied to the install itself
   * You can now have separate options for both SSDs and HDDs

5. **packages:** We are using a custom version of the packages module to provide feedback to the user during the package installation process

6. **pacstrap:** This module is unique to EndeavourOS, and the pure online install method to be close to arch we are using pacstrap for the initial system creation.

7. **userpkglist:** This module is unique to EndeavourOS, and used on the implementation for users to add a list of packages that will get installed in addition to the system on install process. 

8. **partition:** This module has been modified to support custom paritioning for ARM. The files that are changed are `core/PartUtils.cpp` and `core/PartitionActions.cpp`. The first file is changed to force EFI mode on ARM installs and the second file is changed to set 16 MiB empty space at the beginning of parition instead of 2 MiB.

<<<<<<< HEAD
9. **eos-arm:** This modules sets a globalstorage variable signifying that the install is ARM and we can use this variable in other modules.
=======
```
import gettext
_ = gettext.translation("calamares-python",
                        localedir=libcalamares.utils.gettext_path(),
                        languages=libcalamares.utils.gettext_languages(),
                        fallback=True).gettext
```

Error messages should be logged in English, and given to the user
in translated form. In particular, when returning an error message
and description from the `run()` function, return translated forms,
like the following:

```
return (
    _("No configuration found"),
    _("<a longer description of the problem>"))
```

### Running Commands in Python

The use of the `os.system()` function and *subprocess* modules is
discouraged. Using these makes the caller responsible for handling
any chroot or other target-versus-host-system manipulation, and in
Calamares 3.3 may require additional privilege escalation handling.

The primary functions for running a command from Python are:
- `target_env_process_output(command, callback, stdin, timeout)`
- `host_env_process_output(command, callback, stdin, timeout)`
They run the given *command* (which must be a list of strings, like
`sys.argv` or what would be passed to a *subprocess* module call)
either in the target system (within the chroot) or in the host system.
Except for *command*, the arguments are optional.

A very simple example is running `ls` from a Python module (with `libcalamares.utils.` qualification omitted):
```
target_env_process_output(["ls"])
```

The functions return 0. If the exit code of *command* is not 0, an exception
is raised instead of returning 0. The exception is `subprocess.CalledProcessError`
(as if the *subprocess* module had been used), and the `returncode` member
of the exception object can be used to determine the exit code.

Parameter *stdin* may be a string which is fed to the command as standard input.
The *timeout* is in seconds, with 0 (or a negative number) treated as no-timeout.

Parameter *callback* is special:
- If it is `None`, no special handling of the command's output is done.
  The output will be logged, though (if there is any).
- If it is a list, then the output of the command will be appended to the list,
  one line at a time. Lines will still contain the trailing newline character
  (if there is one; output may end without a newline).
  Use this approach to process the command output after it has completed.
- Anything else is assumed to be a callable function that takes one parameter.
  The function is called once for each line of output produced by the command.
  The line of output still contains the trailing newline character (if there is one).
  Use this approach to process the command output while it is running.

Here are three examples of running `ls` with different callbacks:
```
# No processing at all, output is logged
target_env_process_output(["ls"])
target_env_process_output(["ls"], None)

# Appends to the list
ls_output = []
target_env_process_output(["ls"], ls_output)

# Calls the function for each line, which then calls debug()
def handle_output(s):
    debug(f"ls said {s}")
target_env_process_output(["ls"], handle_output)
```


There are additional functions for running commands in the target,
which can select what they return and whether exceptions are raised
or only an exit code is returned. These functions have an overload
that takes a single string (the name of an executable) as well. They should
all be considered deprecated by the callback-enabled functions, above.

- `target_env_call(command, stdin, timeout)` returns the exit code, does not raise.
- `check_target_env_call(command, stdin, timeout)` raises on a non-zero exit code.
- `check_target_env_output(command, stdin, timeout)` returns a single string with the output of *command*, raises on a non-zero exit code.

All of the API functions for running commands set the environment
LC_ALL and LANG to "C" for the called command.

## Process modules

Use of this kind of module is **not** recommended. Use *shellprocess*
instead, which is more configurable.

> Type: jobmodule
> Interface: process

A process jobmodule runs a (single) command. The interface is *process*,
while the module type must be *job* or *jobmodule*.

The module-descriptor key *command* should have a string as value, which is
passed to the shell -- remember to quote it properly in YAML. It is generally
recommended to use a *shellprocess* job module instead (less configuration,
easier to have multiple instances). There is no configuration outside
of the module-descriptor. The *command* undergoes Calamares variable-
expansion (e.g. replacing `${ROOT}` by the target of the installation).
See *shellprocess* documentation for details.

Optional keys are *timeout* and *chroot*.

`CMakeLists.txt` is *not* used for process jobmodules.


## Testing Modules

For testing purposes there is an executable `loadmodule` which is
built, but not installed. It can be found in the build directory.
The `loadmodule` executable behaves like single-module Calamares:
it loads global configuration, job configuration, and then runs
a single module which may be a C++ module or a Python module,
a Job or a ViewModule.

The same application can also be used to test translations,
branding, and slideshows, without starting up a whole Calamares
each time. It is possible to run multiple `loadmodule` executables
at the same time (Calamares tries to enforce that it runs only
once).

The following arguments can be used with `loadmodule`
(there are more; run `loadmodule --help` for a complete list):
 - `--global` takes a filename and reads the file to provide data in
   global storage. The file must be YAML-formatted.
 - `--job` takes a filename and reads that to provide the job
   configuration (e.g. the `.conf` file for the module).
 - `--ui` runs a view module with a UI. Without this option,
   view modules are run as jobs, and most of them are not
   prepared for that, and will crash.
>>>>>>> upstream/calamares
